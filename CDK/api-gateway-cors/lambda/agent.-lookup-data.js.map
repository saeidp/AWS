{"version":3,"file":"agent.-lookup-data.js","sourceRoot":"","sources":["agent.-lookup-data.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,IAAI,CAAC;AACzB,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAW7B,wBAAwB;AACxB,wCAAwC;AACxC,4GAA4G;AAC5G,kDAAkD;AAClD,KAAK;AACL,uBAAuB;AACvB,MAAM,CAAC,MAAM,OAAO,GAAY,KAAK,EAAE,KAAU,EAAE,EAAE;IAErD,0CAA0C;IAC1C,eAAe;IACf,yBAAyB;IACzB,mBAAmB;IACnB,8CAA8C;IAC9C,WAAW;IACX,uEAAuE;IACvE,SAAS;IACT,MAAM;IAEJ,IAAI,CAAC;QACH,2DAA2D;QAC3D,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAEnD,0BAA0B;QAC1B,MAAM,WAAW,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QACvD,MAAM,KAAK,GAAW,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAE9C,sCAAsC;QACtC,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;YAC3B,OAAO,EAAE;gBACP,6BAA6B,EAAE,GAAG;aACnC;SACF,CAAC;IACJ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;QAC3D,OAAO;YACL,UAAU,EAAE,GAAG;YACf,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC;SAC3D,CAAC;IACJ,CAAC;AAEH,CAAC,CAAA","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { APIGatewayProxyHandler } from 'aws-lambda';\nimport type { Handler } from 'aws-lambda';\n\n// Define the type for the objects in the JSON file\ninterface Item {\n  ID: number;\n  Name: string;\n  description: string;\n}\n\n// const corsHeaders = {\n//   'Access-Control-Allow-Origin': '*',\n//   'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',\n//   'Access-Control-Allow-Methods': 'OPTIONS,GET'\n// };\n// The handler function\nexport const handler: Handler = async (event: any) => {\n  \n//   if (event.httpMethod === 'OPTIONS') {\n//     return {\n//       statusCode: 200,\n//       headers: {\n//         'Access-Control-Allow-Origin': '*',\n//       },\n//       body: JSON.stringify({ message: 'CORS preflight successful' })\n//     };\n//   }\n\n  try {\n    // Path to the data.json file inside the Lambda environment\n    const filePath = path.join(__dirname, 'data.json');\n\n    // Read and parse the file\n    const fileContent = fs.readFileSync(filePath, 'utf-8');\n    const items: Item[] = JSON.parse(fileContent);\n\n    // Return the items as a JSON response\n    return {\n      statusCode: 200,\n      body: JSON.stringify(items),\n      headers: {\n        'Access-Control-Allow-Origin': '*',\n      }\n    };\n  } catch (error) {\n    console.error('Error reading or parsing the file:', error);\n    return {\n      statusCode: 500,\n      body: JSON.stringify({ message: 'Internal Server Error' }),\n    };\n  }\n\n}\n"]}