{"version":3,"file":"agentTest.js","sourceRoot":"","sources":["agentTest.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,IAAI,CAAC;AACzB,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAC7B,iCAAiC;AACjC,OAAO,KAAK,GAAG,MAAM,cAAc,CAAC;AACpC,OAAO,EAAE,aAAa,EAAE,MAAM,KAAK,CAAC;AAEpC,+DAA+D;AAC/D,MAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAClD,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;AAQ3C,SAAS,YAAY,CAAC,QAAgB;IACpC,IAAI,CAAC;QACH,8BAA8B;QAC9B,MAAM,WAAW,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAEvD,yBAAyB;QACzB,MAAM,IAAI,GAAY,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;QAE9C,OAAO,IAAI,CAAC;IACd,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,GAAG,CAAC,CAAC;QACzD,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC;AAED,SAAS,WAAW,CAAC,KAAa;IAEhC,MAAM,YAAY,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,CAAmB,CAAC;IACzD,OAAO,YAAY,CAAC;AACtB,CAAC;AAAA,CAAC;AAEF,MAAM,UAAU,YAAY,CAAC,KAAsB;IACjD,IAAI,CAAC;QACH,OAAO,KAAK,CAAC,eAAe,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IAClD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,2BAA2B,EAAE,KAAK,CAAC,CAAC;QAClD,OAAO,EAAE,CAAC;IACZ,CAAC;AACH,CAAC;AAED,MAAM,UAAU,uBAAuB,CAAC,MAAe,EAAE,SAAiB;IACxE,MAAM,YAAY,GAAG,EAAE,CAAA;IAEvB,IAAI,SAAS,CAAC,KAAK,CAAC,wDAAwD,CAAC,EAAE,CAAC;QAC9E,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,gBAAgB,CAAC,CAAC,CAAC;IAClF,CAAC;IAED,IAAI,SAAS,CAAC,KAAK,CAAC,+CAA+C,CAAC,EAAE,CAAC;QACrE,YAAY,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC;IACzE,CAAC;IAED,OAAO,YAAY,CAAC;AACtB,CAAC;AAGD,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAA;AACnD,MAAM,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;AAEtC,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;AACpD,MAAM,YAAY,GAAG,EAAE,CAAC,YAAY,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;AAEzD,MAAM,KAAK,GAAG,WAAW,CAAC,YAAY,CAAC,CAAA;AAEvC,MAAM,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;AAEtC,MAAM,cAAc,GAAG,uBAAuB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAClE,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;AAO5B,iBAAiB;AAEjB,OAAO","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\n// import jwt from 'jsonwebtoken'\nimport * as jwt from 'jsonwebtoken';\nimport { fileURLToPath } from 'url';\n\n// Construct __dirname manually - because of module in tsconfig\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ninterface Agent {\n  ID: number;\n  Name: string;\n  description: string;\n}\n\nfunction readJsonFile(filePath: string): Agent[] {\n  try {\n    // Read the file synchronously\n    const fileContent = fs.readFileSync(filePath, 'utf-8');\n\n    // Parse the JSON content\n    const data: Agent[] = JSON.parse(fileContent);\n\n    return data;\n  } catch (err) {\n    console.error('Error reading or parsing the file:', err);\n    return [];\n  }\n}\n\nfunction decodeToken(token: string) {\n\n  const decodedToken = jwt.decode(token) as jwt.JwtPayload;\n  return decodedToken;  \n};\n\nexport function getUserGroup(token : jwt.JwtPayload): string {\n  try {\n    return token['custom:groups']?.toString() || '';\n  } catch (error) {\n    console.error('Error getting user group:', error);\n    return '';\n  }\n}\n\nexport function filterAgentsByUserGroup(agents: Agent[], userGroup: string): Agent[] {\n  const agentByGroup = []\n  \n  if (userGroup.match('PRIV-AIDA-(dev|test|prod)-Health_Science-(admin|users)')) {\n    agentByGroup.push(...agents.filter((agent) => agent.Name === 'HEALTH-SCIENCE'));\n  }\n\n  if (userGroup.match('PRIV-AIDA-(dev|test|prod)-LITEC-(admin|users)')) {\n    agentByGroup.push(...agents.filter((agent) => agent.Name === 'LITEC'));\n  }\n\n  return agentByGroup;\n}\n\n\nconst filePath = path.join(__dirname, 'agent.json')\nconst agents = readJsonFile(filePath);\n\nconst tokenPath = path.join(__dirname, 'token.txt');\nconst encodedToken = fs.readFileSync(tokenPath, 'utf-8');\n\nconst token = decodeToken(encodedToken)\n\nconst userGroup = getUserGroup(token);\n\nconst filteredAgents = filterAgentsByUserGroup(agents, userGroup);\nconsole.log(filteredAgents);\n  \n  \n\n\n\n\n// (async () => {\n  \n// })()\n\n\n\n\n\n"]}